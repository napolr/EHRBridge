<channel version="3.11.0">
  <id>730b6e98-fddc-43fd-ad56-c42992da8db8</id>
  <nextMetaDataId>6</nextMetaDataId>
  <name>Get All Appointments</name>
  <description></description>
  <revision>113</revision>
  <sourceConnector version="3.11.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.11.0">
      <pluginProperties/>
      <pollConnectorProperties version="3.11.0">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>3600000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.11.0">
        <responseVariable>Postprocessor</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <script>return &quot; &quot;;</script>
    </properties>
    <transformer version="3.11.0">
      <elements/>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.11.0">
      <elements/>
    </filter>
    <transportName>JavaScript Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.11.0">
      <metaDataId>3</metaDataId>
      <name>Get Appointment and Patient Data from EHR_old</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.11.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.11.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>var FHIR_ENDPOINT_URL=&quot;https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/STU3/&quot;;
//globalMap.put(&apos;authCode&apos;,&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1cm46b2lkOmZoaXIiLCJjbGllbnRfaWQiOiJkOWYwN2JlNi0yOGNkLTQ2OWEtYjJjMS1jNjU5NWNjODE5MDEiLCJlcGljLmVjaSI6InVybjplcGljOk9wZW4uRXBpYy1jdXJyZW50IiwiZXBpYy5tZXRhZGF0YSI6IkRvOTM0NWg0ajhWNmpKekFsZVBDUlIwTUttRDc3VVh0d0R6Mmdub1hmTDF0YmJzYTFabExJZC1ha0dNa21ad2xacHVyOGtLUDVjaU9OM2pPMDEzZy03bFpjbXVJVHcyX1NXZXNiUEJGM28ydXFrdGx0bG9qVUw4bU1fdVMxVlNOIiwiZXBpYy50b2tlbnR5cGUiOiJhY2Nlc3MiLCJleHAiOjE2MTk2NjU0NzUsImlhdCI6MTYxOTY2MTg3NSwiaXNzIjoidXJuOm9pZDpmaGlyIiwianRpIjoiY2MyM2I0NGEtZjRmOC00Nzk2LWI4NWUtMjRjYzNkOTNmYWE0IiwibmJmIjoxNjE5NjYxODc1LCJzdWIiOiJldk5wLUtoWXdPT3FBWm4xcFoyZW51QTMifQ.LiFYnWNXfSfKERRPAS3WHcg3O7x8RialVIwcm9B-Kk7chv3O_nrw8qlCmpAG9BMHHSytLBHsQmRDjAB77nxoq_WN7GkoZFIo0fXkdDXaX4VS30AflTrR-r4l_bt_9aDfD5Y7VfAZMiDBuotNUhksNNgFPPEM_5_gpd4qUOR7h5Sl3d8gx3uoqcRsMKZvmhT19j1PCp_1JODKAW0mS0lcmQyiDAVrWMK8bOyv2b_Irg_GYjzno14GaLWSHGL6vCioijQG_P-K7Xfakpnc82RkkbsUkBFP0ioES_6YnYKo_2jLMmMUuxfXK0XwnJhtK88vQeynxPihg1xVSutQ1Ual7A&quot;);


var token=&apos;Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1cm46b2lkOmZoaXIiLCJjbGllbnRfaWQiOiJkOWYwN2JlNi0yOGNkLTQ2OWEtYjJjMS1jNjU5NWNjODE5MDEiLCJlcGljLmVjaSI6InVybjplcGljOk9wZW4uRXBpYy1jdXJyZW50IiwiZXBpYy5tZXRhZGF0YSI6ImFsWXlyRjJFQUtBNlBnVlV1MDluYjVKSzlWWkVHWG1sS1cwX3BQRnE0NmE4MHF3M3U3V2dEX1g0dkswMnNWdEpUeGx3RmgtR09IV2hkU2t6VDE3WXJlTDIwb0FXVkVkOTNtdzJmWHF2OVBHSVFYUnR2UTN3NWZiRWJ0ekVTc2JWIiwiZXBpYy50b2tlbnR5cGUiOiJhY2Nlc3MiLCJleHAiOjE2MTk2Njk1OTgsImlhdCI6MTYxOTY2NTk5OCwiaXNzIjoidXJuOm9pZDpmaGlyIiwianRpIjoiOGYzYTBmNTUtMzVmNS00ZThlLWEzMWYtZmRkMDY3MGJlNTFiIiwibmJmIjoxNjE5NjY1OTk4LCJzdWIiOiJldk5wLUtoWXdPT3FBWm4xcFoyZW51QTMifQ.GS7VbO7-7fFE3gorQfzokIpFj35lBXnc_RvYUlCGgPwnIOqsCdJ9srGiSBo3l174E5rCPTCoDdJ7FyL54I4C-9wUJeBQCFZLPHGADLCTtK8Y6SpqOF76-4h12nzSSP4IJnQdB1IdHfkMIo6sVqJKTSKNB_fqZpj6saKSVd609zCp9GfICaT7eDI0KJv0LZS_h_4EcRIG8mYcSFoqvgCXz-Rjy1el4YhSl6d7KivWkdTFJpVdYtX7Bz_vHowWVwSdpqxmcsL1qE7W_FnLCdvL6ZhyVcVDvDpeqXYra-YOYUQDl3Wwv5WWmOmf-mjhsQYGU7a1jaVfv9VAT6SOJxZlLw&apos;;
//  Step 1 Appointment.$find  - Get all appointments
var APPOINTMENT_FIND_URL=FHIR_ENDPOINT_URL+&quot;Appointment/$find&quot;;
//var Appointment_Find = responseMap.get(&apos;d1&apos;);


var response=execFHIRCall(APPOINTMENT_FIND_URL,token,null,&quot;application/json&quot;,&quot;application/json&quot;,&quot;POST&quot;);

 logger.error(&quot;appointmentsJson=&quot;+response);

 
// var resMessage = Appointment_Find.getStatus().toString();
// logger.error(&quot;gothere  &quot;+resMessage);
 var APPOINTMENT_READ_URL=FHIR_ENDPOINT_URL+&quot;Appointment/&quot;;
 if ( response!=&quot;ERROR&quot;){
	 var messages = new java.util.ArrayList();
	// var stringResponse = Appointment_Find.getMessage();
	 var response=JSON.parse(response);
	 if ( response.total&gt;0 ){
		 
			logger.error(&quot;create individual Appointment API Calls=&quot;);
		
			entries=response.entry;
			for (var e=0; e&lt;entries.length; e++){
				logger.error(&quot;processing entry #&quot;+e);
				if (entries[e].resource.resourceType=&quot;Appointment&quot;){
					var appointment=entries[e].resource;
					 
					var apptReadRequest=APPOINTMENT_READ_URL+&apos;eWLhfjXHp4RUczvtT2om.1Ii2uisGHcDc6rMEjO0xHBA3&apos;;
					//var apptReadRequest=APPOINTMENT_READ_URL+appointment.id;
					//fhirGet(url,securityToken,acceptType,contentType)
					//logger.error(&quot;New apiCall=&quot;+APPOINTMENT_READ_URL);
					response=execFHIRCall(apptReadRequest,token,null,&quot;application/fhir+json&quot;,&quot;application/json&quot;,&quot;GET&quot;);
					logger.error(&quot;response=&quot;+response);
					//messages.add(newMessage);
				}
				
			}
				
	 }
 }
	 

return messages;



function execFHIRCall(URLstring,securityToken,body,acceptType,contentType,httpMethod) {
     
  		var url = new java.net.URL(URLstring);
          logger.error(&quot;REQUEST=&quot;+httpMethod+&quot; &quot;+URLstring);
    		// Open connection to url
    		var conn = url.openConnection();
    		//conn.setReadTimeout(15000);
          //conn.setConnectTimeout(15000);
          conn.setRequestMethod(httpMethod);
          conn.setDoInput(true);
          conn.setDoOutput(true);
          conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
          conn.setRequestProperty (&quot;Accept&quot;, acceptType);
          conn.setRequestProperty (&quot;Content-Type&quot;, contentType);
          //conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
    		// Send request
    		var outStream = conn.getOutputStream();
    		var outWriter = new java.io.OutputStreamWriter(outStream);
		var buffer=&apos;&apos;;
    		var responseCode = conn.getResponseCode();
		logger.error(&quot;Response Code :: &quot; + responseCode);
		if (responseCode == &quot;200&quot;) {
          //Capture Response
		    var respCode = conn.getResponseCode();
		    var inputStream = conn.getInputStream();
		    var streamReader = new java.io.InputStreamReader(inputStream);
		    var respStream = new java.io.BufferedReader(streamReader);
		    //var buffer = &apos;&apos;;
		    var line = null;
		    while ((line = respStream.readLine()) != null) {
		        buffer = buffer + line;
		    }
		    respStream.close();
		} else
		   buffer=&quot;ERROR&quot;;
		return buffer;
}
</script>
      </properties>
      <transformer version="3.11.0">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.11.0">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.11.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>false</waitForPrevious>
    </connector>
    <connector version="3.11.0">
      <metaDataId>5</metaDataId>
      <name>Get Appointment and Patient Data from EHR</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.11.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.11.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.11.0">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.11.0">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.11.0">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>var GET_PATIENT_INFO=true;
var FHIR_ENDPOINT_URL=&quot;https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/STU3/&quot;;
//globalMap.put(&apos;authCode&apos;,&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1cm46b2lkOmZoaXIiLCJjbGllbnRfaWQiOiJkOWYwN2JlNi0yOGNkLTQ2OWEtYjJjMS1jNjU5NWNjODE5MDEiLCJlcGljLmVjaSI6InVybjplcGljOk9wZW4uRXBpYy1jdXJyZW50IiwiZXBpYy5tZXRhZGF0YSI6IkRvOTM0NWg0ajhWNmpKekFsZVBDUlIwTUttRDc3VVh0d0R6Mmdub1hmTDF0YmJzYTFabExJZC1ha0dNa21ad2xacHVyOGtLUDVjaU9OM2pPMDEzZy03bFpjbXVJVHcyX1NXZXNiUEJGM28ydXFrdGx0bG9qVUw4bU1fdVMxVlNOIiwiZXBpYy50b2tlbnR5cGUiOiJhY2Nlc3MiLCJleHAiOjE2MTk2NjU0NzUsImlhdCI6MTYxOTY2MTg3NSwiaXNzIjoidXJuOm9pZDpmaGlyIiwianRpIjoiY2MyM2I0NGEtZjRmOC00Nzk2LWI4NWUtMjRjYzNkOTNmYWE0IiwibmJmIjoxNjE5NjYxODc1LCJzdWIiOiJldk5wLUtoWXdPT3FBWm4xcFoyZW51QTMifQ.LiFYnWNXfSfKERRPAS3WHcg3O7x8RialVIwcm9B-Kk7chv3O_nrw8qlCmpAG9BMHHSytLBHsQmRDjAB77nxoq_WN7GkoZFIo0fXkdDXaX4VS30AflTrR-r4l_bt_9aDfD5Y7VfAZMiDBuotNUhksNNgFPPEM_5_gpd4qUOR7h5Sl3d8gx3uoqcRsMKZvmhT19j1PCp_1JODKAW0mS0lcmQyiDAVrWMK8bOyv2b_Irg_GYjzno14GaLWSHGL6vCioijQG_P-K7Xfakpnc82RkkbsUkBFP0ioES_6YnYKo_2jLMmMUuxfXK0XwnJhtK88vQeynxPihg1xVSutQ1Ual7A&quot;);


var token=&quot;Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1cm46b2lkOmZoaXIiLCJjbGllbnRfaWQiOiJkOWYwN2JlNi0yOGNkLTQ2OWEtYjJjMS1jNjU5NWNjODE5MDEiLCJlcGljLmVjaSI6InVybjplcGljOk9wZW4uRXBpYy1jdXJyZW50IiwiZXBpYy5tZXRhZGF0YSI6ImFsWXlyRjJFQUtBNlBnVlV1MDluYjVKSzlWWkVHWG1sS1cwX3BQRnE0NmE4MHF3M3U3V2dEX1g0dkswMnNWdEpUeGx3RmgtR09IV2hkU2t6VDE3WXJlTDIwb0FXVkVkOTNtdzJmWHF2OVBHSVFYUnR2UTN3NWZiRWJ0ekVTc2JWIiwiZXBpYy50b2tlbnR5cGUiOiJhY2Nlc3MiLCJleHAiOjE2MTk2Njk1OTgsImlhdCI6MTYxOTY2NTk5OCwiaXNzIjoidXJuOm9pZDpmaGlyIiwianRpIjoiOGYzYTBmNTUtMzVmNS00ZThlLWEzMWYtZmRkMDY3MGJlNTFiIiwibmJmIjoxNjE5NjY1OTk4LCJzdWIiOiJldk5wLUtoWXdPT3FBWm4xcFoyZW51QTMifQ.GS7VbO7-7fFE3gorQfzokIpFj35lBXnc_RvYUlCGgPwnIOqsCdJ9srGiSBo3l174E5rCPTCoDdJ7FyL54I4C-9wUJeBQCFZLPHGADLCTtK8Y6SpqOF76-4h12nzSSP4IJnQdB1IdHfkMIo6sVqJKTSKNB_fqZpj6saKSVd609zCp9GfICaT7eDI0KJv0LZS_h_4EcRIG8mYcSFoqvgCXz-Rjy1el4YhSl6d7KivWkdTFJpVdYtX7Bz_vHowWVwSdpqxmcsL1qE7W_FnLCdvL6ZhyVcVDvDpeqXYra-YOYUQDl3Wwv5WWmOmf-mjhsQYGU7a1jaVfv9VAT6SOJxZlLw&quot;;
//  Step 1 Appointment.$find  - Get all appointments
var APPOINTMENT_FIND_URL=FHIR_ENDPOINT_URL+&quot;Appointment/$find&quot;;
//var Appointment_Find = responseMap.get(&apos;d1&apos;);


var response=execRESTCall(APPOINTMENT_FIND_URL,token,null,&quot;application/json&quot;,&quot;application/json&quot;,&quot;POST&quot;); 
 logger.error(&quot;appointmentsJson=&quot;+response);

 
 var APPOINTMENT_READ_URL=FHIR_ENDPOINT_URL+&quot;Appointment/&quot;;
 if ( response!=&quot;ERROR&quot;){
	 var messages = new java.util.ArrayList();
	// var stringResponse = Appointment_Find.getMessage();
	 var response=JSON.parse(response);
	 if ( response.total&gt;0 ){
		 
			logger.error(&quot;create individual Appointment API Calls=&quot;);
		
			entries=response.entry;
			for (var e=0; e&lt;entries.length; e++){
				logger.error(&quot;processing entry #&quot;+e);
				if (entries[e].resource.resourceType=&quot;Appointment&quot;){
					var appointment=entries[e].resource;
					appointment.id=&apos;eWLhfjXHp4RUczvtT2om.1Ii2uisGHcDc6rMEjO0xHBA3&apos;;
				 	//var apptReadRequest=APPOINTMENT_READ_URL+&apos;eWLhfjXHp4RUczvtT2om.1Ii2uisGHcDc6rMEjO0xHBA3&apos;;
					var apptReadRequest=APPOINTMENT_READ_URL+appointment.id;
					//fhirGet(url,securityToken,acceptType,contentType)
					//logger.error(&quot;New apiCall=&quot;+APPOINTMENT_READ_URL);
					response=execRESTGet(apptReadRequest, token, null, &quot;application/fhir+json&quot;, &quot;application/json&quot;, &quot;GET&quot;);
					if (response!=&quot;ERROR&quot; ) {
						logger.error(&quot;appointmentJSON=&quot;+response);
						appointment=JSON.parse(response);
						var patientURL=&apos;&apos;;
						var patientName=&apos;&apos;
						var appointmentStatus=&apos;&apos;
						var appointmentID=appointment.id
						//find patient data
						if ( appointment.resourceType ) {
							for (var i=0;i&lt;appointment.participant.length;i++){
								//loop through the participants and find the patient info...
								if ( appointment.participant[i].actor.reference.indexOf(&quot;Patient&quot;) &gt;0 ){
									patientURL=appointment.participant[i].actor.reference;
									patientName=appointment.participant[i].actor.display;
									appointmentStatus=appointment.participant[i].status;
									//We Found the appointment, now lets get the patient information
									if (GET_PATIENT_INFO){
										logger.error(&quot;PatientURL=&quot;+patientURL);
										response=execRESTGet(patientURL, token, null, &quot;application/fhir+json&quot;, &quot;application/json&quot;, &quot;GET&quot;);
										logger.error(&quot;response=&quot;+response);
									}
									
								}
							}
						}
						
						
					}
					
					//messages.add(newMessage);
				}
				
			}
				
	 }
 }
	 

return messages;</preprocessingScript>
  <postprocessingScript>return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.11.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.11.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1619668364654</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.11.0">
        <id>8bd1b671-3159-48c7-addf-2a66869315ad</id>
        <name>REST LIBRARY</name>
        <revision>10</revision>
        <lastModified>
          <time>1619676004899</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>FHIR Library</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>2932fd04-e387-49a0-8155-745eb427c877</string>
          <string>f9bb4915-f249-4430-87d6-e3fd3ef0a3a3</string>
          <string>730b6e98-fddc-43fd-ad56-c42992da8db8</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.11.0">
            <id>3b86c8d7-8907-41c1-a106-62d22c468de3</id>
            <name>execRESTCall</name>
            <revision>8</revision>
            <lastModified>
              <time>1619666222193</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	
	This template defines a function which allows http  Calls to an endpoint.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function execRESTCall(URLstring,securityToken,body,acceptType,contentType,httpMethod) {
     
  		var url = new java.net.URL(URLstring);
          logger.error(&quot;REQUEST=&quot;+httpMethod+&quot; &quot;+URLstring);
    		// Open connection to url
    		var conn = url.openConnection();
    		//conn.setReadTimeout(15000);
          //conn.setConnectTimeout(15000);
          conn.setRequestMethod(httpMethod);
          conn.setDoInput(true);
          conn.setDoOutput(true);
          conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
          conn.setRequestProperty (&quot;Accept&quot;, acceptType);
          conn.setRequestProperty (&quot;Content-Type&quot;, contentType);
          //conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
    		// Send request
    		var outStream = conn.getOutputStream();
    		var outWriter = new java.io.OutputStreamWriter(outStream);
		var buffer=&apos;&apos;;
    		var responseCode = conn.getResponseCode();
		logger.error(&quot;Response Code :: &quot; + responseCode);
		if (responseCode == &quot;200&quot;) {
          //Capture Response
		    var respCode = conn.getResponseCode();
		    var inputStream = conn.getInputStream();
		    var streamReader = new java.io.InputStreamReader(inputStream);
		    var respStream = new java.io.BufferedReader(streamReader);
		    //var buffer = &apos;&apos;;
		    var line = null;
		    while ((line = respStream.readLine()) != null) {
		        buffer = buffer + line;
		    }
		    respStream.close();
		} else
		   buffer=&quot;ERROR&quot;;
		return buffer;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.11.0">
            <id>7ab1a858-dfb1-4188-ab8d-3123f5b40db1</id>
            <name>execRestGet</name>
            <revision>6</revision>
            <lastModified>
              <time>1619666690579</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	
	This template defines a function which allows httpGets to an endpoint.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function execRESTGet(URLstring,securityToken,body,acceptType,contentType,httpMethod) {
     
  		var url = new java.net.URL(URLstring);
          logger.error(&quot;REQUEST=&quot;+httpMethod+&quot; &quot;+URLstring);
    		// Open connection to url
    		var conn = url.openConnection();
    		//conn.setReadTimeout(15000);
          //conn.setConnectTimeout(15000);
          conn.setRequestMethod(httpMethod);
          conn.setDoInput(true);
          conn.setDoOutput(true);
          conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
          conn.setRequestProperty (&quot;Accept&quot;, acceptType);
          conn.setRequestProperty (&quot;Content-Type&quot;, contentType);
	
		conn.setRequestMethod(&apos;GET&apos;); 
	var response=&quot;&quot;;
	var inputStream = conn.getInputStream();
	var streamReader = new java.io.InputStreamReader(inputStream);
	var respStream = new java.io.BufferedReader(streamReader);
	var responseCode = conn.getResponseCode();
	logger.error(&quot;Response Code :: &quot; + responseCode);
	if (responseCode == &quot;200&quot;) {
		var buffer = new java.lang.StringBuffer();
		var line = null;
		while ((line = respStream.readLine()) != null) {
		  buffer.append(line + &apos;\n&apos;);
		}
		respStream.close();
		response=buffer.toString();
	} else {
		 response=&quot;ERROR&quot;
	}

	return response;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.11.0">
            <id>ed261d0b-99d5-487d-8e4e-af2f9ef7e7a0</id>
            <name>getQueryParameterValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1619670381772</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function gets the parameters passed in the inbound HTTP Request to an HTTPListener Connector
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getQueryParameterValue(urlQuery,parameterKey,defaultValueIn) {
   var defaultValue = (defaultValueIn &amp;&amp; StringUtils.isNotEmpty(defaultValueIn)) ? defaultValueIn : &apos;&apos;;
   
   // 1. Validate that we have a URL Query string
   if (StringUtils.isEmpty(urlQuery)) {
      return defaultValue;
   }

   // 2. Validate that we have a parameterKey
   if (StringUtils.isEmpty(parameterKey)) {
      return defaultValue;
   }
   
   var parameterValue = defaultValue;
   try {
      var urlParts = StringUtils.splitByWholeSeparator(urlQuery, &quot;?&quot;);

      // If no &quot;?&quot;, then treat the entire string as the queryParameters.
      var queryParams = urlParts.length &gt; 1 ? urlParts[1] : urlParts[0];

      var keyPairs = StringUtils.splitByWholeSeparator(queryParams, &quot;&amp;&quot;);

      // cycle the list of key-value pairs and find the parameter
      // specified by the &apos;parameterKey&apos; passed into this function
      for (var i = 0; i &lt; keyPairs.length; i++) {
         var keyValueParts = StringUtils.splitByWholeSeparator(keyPairs[i], &quot;=&quot;);
         
         if (keyValueParts.length == 2 &amp;&amp; StringUtils.equalsIgnoreCase(keyValueParts[0], parameterKey)) {
            parameterValue = String(qie.urlDecode(keyValueParts[1]));
            break;
         }
      }
   } catch (err) {
      throw &quot;Failed to getQueryParameterValue: &quot; + err;
   }
   return parameterValue;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>