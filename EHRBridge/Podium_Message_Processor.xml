<channel version="3.11.0">
  <id>2932fd04-e387-49a0-8155-745eb427c877</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>Podium_Message_Processor</name>
  <description></description>
  <revision>33</revision>
  <sourceConnector version="3.11.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.11.0">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.11.0">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.11.0">
        <host>0.0.0.0</host>
        <port>80</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.11.0">
        <responseVariable>d1</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
      <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
      <responseContentType>application/json</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode>${responseStatusCode}</responseStatusCode>
      <responseHeaders class="linked-hash-map">
        <entry>
          <string>Content-Type</string>
          <list>
            <string> ${responseContentType}</string>
          </list>
        </entry>
      </responseHeaders>
      <responseHeadersVariable></responseHeadersVariable>
      <useResponseHeadersVariable>false</useResponseHeadersVariable>
      <charset>UTF-8</charset>
      <contextPath>/postConversation</contextPath>
      <timeout>30000</timeout>
      <staticResources/>
    </properties>
    <transformer version="3.11.0">
      <elements/>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.11.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.11.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.11.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.11.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.11.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.11.0">
      <elements/>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.11.0">
      <metaDataId>1</metaDataId>
      <name>generate Response;</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.11.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.11.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>// Mirth strings don&apos;t support startsWith() in Mirth 3.0.3.
// If necessary, add a method to the String prototype.
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position){
      position = position || 0;
      return this.substr(position, searchString.length) === searchString;
  };
}
 
/*
Incoming message looks like this:
 
{
	&quot;patientID&quot;: &quot;test123&quot;,
	&quot;messageID&quot;: &quot;eWLhfjXHp4RUczvtT2om.1Ii2uisGHcDc6rMEjO0xHBA3&quot;,
	&quot;messageText&quot;: &quot;This is a test&quot;
}
*/
 
// Just in case we fail, set a sane responseContentType
channelMap.put(&apos;responseContentType&apos;, &apos;text/plain&apos;);
 
var msg = connectorMessage.getRawData();
logger.error ( connectorMessage.getRawData() ) ;
var params=sourceMap.get(&apos;parameters&apos;).getParameter(&apos;patientID&apos;);
//var params=sourceMap.getParameterList(&apos;patientID&apos;)
logger.debug(&quot;parm=&quot;+params) ;
// Get the REST data from the &quot;context path&quot; which is actually
// the &quot;path info&quot; of the request, so it will start with &apos;/myrestservice&apos;.

var myServicePrefix = &apos;/postConversation&apos;;
var minimumURLParameterCount = 2; // This is the minimum you require to do your work
var maximumExpectedURLParameterCount = 5; // however many you expect to get

// params=inParms.split(&quot;,&quot;);
/*
if(params.length &lt; minimumURLParameterCount)
 return Packages.com.mirth.connect.server.userutil.ResponseFactory.getErrorResponse(&apos;Too few parameters in request&apos;);
 if(params.length &gt; maximumExpectedURLParameterCount)
 return Packages.com.mirth.connect.server.userutil.ResponseFactory.getErrorResponse(&apos;Too many parameters in request&apos;);
*/
// Now, determine the client&apos;s preference for what data type to return (XML vs. JSON).
// We will default to XML.
var clientWantsJSON = false;
var responseContentType = &apos;text/xml&apos;;
 
// If we see any kind of JSON before any kind of XML, we&apos;ll use
// JSON. Otherwise, we&apos;ll use XML.
//
// Technically, this is incorrect resolution of the &quot;Accept&quot; header,
// but it&apos;s good enough for an example.

responseContentType = &apos;application/json&apos;;

 
var xml;
var json;
 
 
json = { status : &apos;SUCCESS&apos; };
 
 
try {
    /*
      Here is where you do whatever your service needs to actually do.
     */
 
 
 
  // Set the response code and content-type appropriately.
  // http://www.mirthproject.org/community/forums/showthread.php?t=12678
 
  channelMap.put(&apos;responseStatusCode&apos;, 200);
 
 
    json.status = &apos;success&apos;;
    var content = JSON.stringify(json);
    channelMap.put(&apos;responseContent&apos;, content);
    channelMap.put(&apos;responseContentType&apos;, responseContentType);
    return content;
 
}
catch (err)
{
  channelMap.put(&apos;responseStatusCode&apos;, &apos;500&apos;);
  
    json.status = &apos;error&apos;;
    if(err.javaException) {
      // If you want to unpack a Java exception, this is how you do it:
      json.errorType = String(err.javaException.getClass().getName());
      json.errorMessage = String(err.javaException.getMessage());
    }
 
    channelMap.put(&apos;responseContentType&apos;, responseContentType);
 
    // Return an error with our &quot;error&quot; JSON
    return Packages.com.mirth.connect.server.userutil.ResponseFactory.getErrorResponse(JSON.stringify(json));
  
 
    channelMap.put(&apos;responseContentType&apos;, responseContentType);
 
    // Return an error with our &quot;error&quot; XML
    return Packages.com.mirth.connect.server.userutil.ResponseFactory.getErrorResponse(xml.toString());
  
}</script>
      </properties>
      <transformer version="3.11.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.11.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.11.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.11.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.11.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.11.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.11.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1619677694632</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.11.0">
        <id>8bd1b671-3159-48c7-addf-2a66869315ad</id>
        <name>REST LIBRARY</name>
        <revision>10</revision>
        <lastModified>
          <time>1619676004899</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>FHIR Library</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>2932fd04-e387-49a0-8155-745eb427c877</string>
          <string>f9bb4915-f249-4430-87d6-e3fd3ef0a3a3</string>
          <string>730b6e98-fddc-43fd-ad56-c42992da8db8</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.11.0">
            <id>3b86c8d7-8907-41c1-a106-62d22c468de3</id>
            <name>execRESTCall</name>
            <revision>8</revision>
            <lastModified>
              <time>1619666222193</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	
	This template defines a function which allows http  Calls to an endpoint.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function execRESTCall(URLstring,securityToken,body,acceptType,contentType,httpMethod) {
     
  		var url = new java.net.URL(URLstring);
          logger.error(&quot;REQUEST=&quot;+httpMethod+&quot; &quot;+URLstring);
    		// Open connection to url
    		var conn = url.openConnection();
    		//conn.setReadTimeout(15000);
          //conn.setConnectTimeout(15000);
          conn.setRequestMethod(httpMethod);
          conn.setDoInput(true);
          conn.setDoOutput(true);
          conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
          conn.setRequestProperty (&quot;Accept&quot;, acceptType);
          conn.setRequestProperty (&quot;Content-Type&quot;, contentType);
          //conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
    		// Send request
    		var outStream = conn.getOutputStream();
    		var outWriter = new java.io.OutputStreamWriter(outStream);
		var buffer=&apos;&apos;;
    		var responseCode = conn.getResponseCode();
		logger.error(&quot;Response Code :: &quot; + responseCode);
		if (responseCode == &quot;200&quot;) {
          //Capture Response
		    var respCode = conn.getResponseCode();
		    var inputStream = conn.getInputStream();
		    var streamReader = new java.io.InputStreamReader(inputStream);
		    var respStream = new java.io.BufferedReader(streamReader);
		    //var buffer = &apos;&apos;;
		    var line = null;
		    while ((line = respStream.readLine()) != null) {
		        buffer = buffer + line;
		    }
		    respStream.close();
		} else
		   buffer=&quot;ERROR&quot;;
		return buffer;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.11.0">
            <id>7ab1a858-dfb1-4188-ab8d-3123f5b40db1</id>
            <name>execRestGet</name>
            <revision>6</revision>
            <lastModified>
              <time>1619666690579</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	
	This template defines a function which allows httpGets to an endpoint.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function execRESTGet(URLstring,securityToken,body,acceptType,contentType,httpMethod) {
     
  		var url = new java.net.URL(URLstring);
          logger.error(&quot;REQUEST=&quot;+httpMethod+&quot; &quot;+URLstring);
    		// Open connection to url
    		var conn = url.openConnection();
    		//conn.setReadTimeout(15000);
          //conn.setConnectTimeout(15000);
          conn.setRequestMethod(httpMethod);
          conn.setDoInput(true);
          conn.setDoOutput(true);
          conn.setRequestProperty (&quot;Authorization&quot;, securityToken);
          conn.setRequestProperty (&quot;Accept&quot;, acceptType);
          conn.setRequestProperty (&quot;Content-Type&quot;, contentType);
	
		conn.setRequestMethod(&apos;GET&apos;); 
	var response=&quot;&quot;;
	var inputStream = conn.getInputStream();
	var streamReader = new java.io.InputStreamReader(inputStream);
	var respStream = new java.io.BufferedReader(streamReader);
	var responseCode = conn.getResponseCode();
	logger.error(&quot;Response Code :: &quot; + responseCode);
	if (responseCode == &quot;200&quot;) {
		var buffer = new java.lang.StringBuffer();
		var line = null;
		while ((line = respStream.readLine()) != null) {
		  buffer.append(line + &apos;\n&apos;);
		}
		respStream.close();
		response=buffer.toString();
	} else {
		 response=&quot;ERROR&quot;
	}

	return response;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.11.0">
            <id>ed261d0b-99d5-487d-8e4e-af2f9ef7e7a0</id>
            <name>getQueryParameterValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1619670381772</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function gets the parameters passed in the inbound HTTP Request to an HTTPListener Connector
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getQueryParameterValue(urlQuery,parameterKey,defaultValueIn) {
   var defaultValue = (defaultValueIn &amp;&amp; StringUtils.isNotEmpty(defaultValueIn)) ? defaultValueIn : &apos;&apos;;
   
   // 1. Validate that we have a URL Query string
   if (StringUtils.isEmpty(urlQuery)) {
      return defaultValue;
   }

   // 2. Validate that we have a parameterKey
   if (StringUtils.isEmpty(parameterKey)) {
      return defaultValue;
   }
   
   var parameterValue = defaultValue;
   try {
      var urlParts = StringUtils.splitByWholeSeparator(urlQuery, &quot;?&quot;);

      // If no &quot;?&quot;, then treat the entire string as the queryParameters.
      var queryParams = urlParts.length &gt; 1 ? urlParts[1] : urlParts[0];

      var keyPairs = StringUtils.splitByWholeSeparator(queryParams, &quot;&amp;&quot;);

      // cycle the list of key-value pairs and find the parameter
      // specified by the &apos;parameterKey&apos; passed into this function
      for (var i = 0; i &lt; keyPairs.length; i++) {
         var keyValueParts = StringUtils.splitByWholeSeparator(keyPairs[i], &quot;=&quot;);
         
         if (keyValueParts.length == 2 &amp;&amp; StringUtils.equalsIgnoreCase(keyValueParts[0], parameterKey)) {
            parameterValue = String(qie.urlDecode(keyValueParts[1]));
            break;
         }
      }
   } catch (err) {
      throw &quot;Failed to getQueryParameterValue: &quot; + err;
   }
   return parameterValue;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>